import os
import pandas as pd
import requests

EMPTY_IMG = [b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00\xff\xdb\x00\x84\x00\x05\x03\x04\x07\x05\x07\x05\x05\x05\x05\x06\x05\x08\x05\x06\x05\x05\x05\x05\x08\x05\x05\x07\x05\x08\x05\x05\x05\t\x06\x08\t\x05\x05\x13\n', b'\x1c\x0b\x07\x08\x1a\t\x08\x05\x0e!\x18\x1a\x1d\x11\x1f\x13\x1f\x13\x0b"\x18"\x1e\x18\x1c\x12\x13\x12\x01\x05\x05\x05\x07\x06\x07\x05\x08\x08\x05\x12\x08\x05\x08\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\x12\xff\xc0\x00\x11\x08\x00Z\x00x\x03\x01"\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x1b\x00\x01\x00\x02\x03\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x04\x02\x03\x07\x06\x05\xff\xc4\x00=\x10\x00\x02\x01\x02\x03\x03\x07\x06\r\x05\x00\x00\x00\x00\x00\x00\x00\x02\x01\x03\x04\x05\x11\x12\x06\x13!\x07"12ARa\x14Bqr\x92\xd2\x15U\x81\x84\x91\x94\xb1\xc1\xc2\xc3\xd1\xd3\xf0\x17Qbd\xb3\xff\xc4\x00\x14\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xc4\x00\x14\x11\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\xef@\x00\x00\x00\x00\x98\x82t\x81\x882\xd04\x01\x882\xd04\x81\x88&`\x80\x00\x00\x00\x00\x00\x00\x10f\xaab\xa5\x8a*\x01)\x1b\x96\x81\xf26\x83j\xecpVZ7\x1b\xda\xd5\x9a\x15\xda\xde\x8cC:#uf\xb3\xcc\xc2\xa7\x87\x1c\xfc\x0f\x91<\xa8Z\xafW\n', b'\xbaoMku\xfd@\xf6\x1b\x81\xb8<\\\xf2\xa7O\xcd\xc1\xdf\xe5\xbdH\xfc\xb3\x1f\xea\xa2\xfcM?^_\xda\x03\xdbn\x0cZ\x81\xe3W\x95:>v\x0fW\xfc\xb4\xde\xd2\x9f\xcb\x83lr\x9fh\xdd8e\xe2z*\xda\xb7\xdf\x00zw\xa6ie4\xe0\x1bEe\x8dC\xf9#:=(\xd4\xf6\xf5\x15R\xb4\'F\xa5\xe30\xcb\xe8\x92\xdde\x02\xb8\x0c\x00\x00\x00\x00\x00\xc9\x0b\xb6\x8b\xaaT\xa4\x85\xfb9\xe2\xa0p\xacz\xe2n/1\x0b\x86mSV\xee\xe5\xb5t\xf3V\xb3"\xfc\x9aU \xa6MI\xe7;w\x9e\xa3{O%\xbc\x12\xc2q\x0b\xab[$x\xa57UV\x96\xb6\xe2\xab\xab\xa6t\xf6\xf0\x86\x02\x98=6\xdel\xac`Si)u7\tu\xbd^z*UW\xa3\xa6[\x9b\x13\x94\xaeL\xa5\xcb\xad\x86\xdda?\x0cyn\xaa\x8bmN\xf5\xad\xf7K\xb9\xdd:\xc4\xe9Z\xb9\xe7\xaf&_\x0c\xc0\xf1\xa0\xf5{\x0b\xb2\x11\x8e\xa5\xd5j\xb7sj\xb4j-\x15T\xa4\xae\xedU\x93^m\xc62\\\xa5O7\x88\xdbM\xa5{\x8bV\x98v\xb5\xabV\xdd\x9dz\xac\xd4\x9eRe|8\x01\xf5\xb9?\xaf4qL5\xb5i\x8a\xb5Z\xdd\xfcV\xb22e\xf4\xca\x9d\x82\xe6\x0e\'\xb2\xed\xa7\x10\xc3%zV\xf2\xd3\xfe\xcav\xeb\xbf8\n', b'.A.@\x00\x00\x00\x00\x12\x85\xdbF\xe3\x1e\x92\x8c\x1b\xe9>\x908]\xcaJU\xac\x8d\xd2\x95j\xa3z\xd1Vb~\xc3\x1ao)*\xe8\xd2\x8c\x92\xb2\x8e\xad\x94\xab/\x18\x95n\xc9\xcc\xfb{m\x84\xd4\xb1\xbb\xbavI\xdc\xddU\xa9qoZ\x17\x99+U\xe5\xe5Z{\x1a&Z\x0f\x85\xaa;\xd0\x05\xacB\xfe\xe2\xf5\x96\xad\xed\xd5k\xa7X\xd0\x8fR\xab;*t\xe4\xbf\xda\t|J\xe5\xa8-\x94\xdd\xd7ku\x9dKk5_s\x1a[8\xe6te\x9f\x12\xa6d\x81k\x0f\xc4\xael\xb5\xf9%\xdd{]\xeci\xab\xbb\xaa\xc9\xa9{5}%Y\x9f\xe4\xf1in\xd9f\xed\x923\x1a\xa3\xbd\x00}M\x92Mx\x8e\x18\xbf\xee[7\xb2\xf0\xf3\xf6\x1d\xa6\xe1\x8e]\xc9\xae\x15R\xb5\xdd+\xe6IZ6\x9b\xc7\xde\xca\xe4\xafZRQ\x12\x97zcVs\x97\xdet\xba\x8c\x06\xa6 H\x00\x00\x00\x00\x00J\xc9\x00\r\x9a\xb5sYa\xa3\xbb*\xb3\x1e\xc9\xad\xad\xad\xdf\xafko>\xb5\xbd\x19\xfc f\x06\xa6\xc3,[\xad\x87\xd9\xb7\xcdh\xfb\xa6?\x04X|Yg\xf5j?\xa1\xbf1\x98\x1a\xd7\x0c\xb2^\xae\x1ff\xbf4\xa3\xee\x9bV\xde\x82u-m\xd3\xd5\xb7\xa2\xbf\x84\x8c\xc6`l\x97\xec\xec^\xaa\xc7\x05\x8fU{\x0c&H\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xd9']

def getPhoto(dat):
    vId = dat[0]
    link = dat[1]
    if not os.path.exists("data//" + vId + ".jpg"):
        r = requests.get(link)
        with open("data//" + vId + ".jpg", "wb+") as f:
            f.write(r.content)
        return 1
    else:
        return 0

def removeEmpties():
    count = 0
    for filename in os.listdir('data'):
        with open("data/" + filename, "rb") as f:
            imgData = f.readlines()
        
        if imgData == EMPTY_IMG:
            os.remove("data/" + filename)
            count+=1
        
    print("Removed {} empty photos".format(count))

data = pd.read_csv("USvideos.csv") #Download and unzip from https://www.kaggle.com/datasnaek/youtube-new/version/113#USvideos.csv
dat = [dat for _, dat in data[["video_id","thumbnail_link"]].iterrows()]

tot = len(dat)
c = 0
d_count = 0
s_count = 0

for _, d in enumerate(dat):
    print("Downloading: {:.1f}% Complete".format((c/tot)*100), end="\r")
    
    if getPhoto(d):
        d_count += 1
    else:
        s_count += 1
    c+=1

print("\nFinished")
print(str(d_count), "images downloaded")
print(str(s_count), "images skipped. This could be due to an error in the link or the image may have already been downloaded")

removeEmpties()

print("Total photos in data: {}".format(len(os.listdir('data'))))